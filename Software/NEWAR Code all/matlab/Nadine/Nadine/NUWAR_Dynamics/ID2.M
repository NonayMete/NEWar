%function [Q,lambda] = ID2(V,d1V,d2V,theta,d1theta,d2theta, alpha, beta);
%
%Inverse Dynamics Function 2 - Matrix Algebra Formulation
%
% This function solves the inverse dynamics problem for a specific point in
% time - for a given set of positions, velocities and accelerations of the
% dependent coordinates it calculates the required motor torques.
%
% This function is used by the 'IDTraj' function to calculate the motor
% torques at each time point.
%
% Input Parameters:
%      V = position of the travelling plate (in base coordinates, in metres)
%      d1V = velocity of the travelling plate
%      d2V = acceleration of the travelling plate
%      theta = control arm (motor) angles
%      d1theta = angular velocity of the control arm angles
%      d2theta = anglular acceleration of the control arm angles
%      alpha = the orientation of the motors in the 'alpha' direction, in degrees
%      beta  = the orientation of the motors in the 'beta' direction, in degrees
%
% Default values:
%      V, d1V, d2V, theta, d1theta, d2theta: are required
%      alpha and beta: alpha=beta=0, corresponding to Delta configuration
%
% Note: all input angles are in degrees.
%
% Output values:
%      Q = vector of motor torques
%      lambda = vector of Lagrange multipliers
%
% Author: Nadine Frame 1999


function [Q,lambda] = ID2(V,d1V,d2V,theta,d1theta,d2theta,alpha,beta);

%Set defaults:
if nargin < 6
   disp('Insufficient parameters.');
   help ID2;
   return
end
if nargin < 7 | isempty(alpha)
	alpha =0;    %default value corresponding to Delta configuration
end
if nargin < 8 | isempty(beta)
	beta=0;      %default value corresponding to Delta configuration
end 
	
%Initialise parameters:
InitArms;
InitDynamics;

phi=[0;120;240];   %angles of the motor array

%covert angles from degrees to radians
alpha=alpha*pi/180;
beta=beta*pi/180;
phi=phi*pi/180;
theta=theta*pi/180;
d1theta=d1theta*pi/180;
d2theta=d2theta*pi/180;

R=Ra-Rb;

%Assign vector components:
phi1=phi(1);
phi2=phi(2);
phi3=phi(3);
theta1=theta(1);
theta2=theta(2);
theta3=theta(3);
d1theta1=d1theta(1);
d1theta2=d1theta(2);
d1theta3=d1theta(3);
d2theta1=d2theta(1);
d2theta2=d2theta(2);
d2theta3=d2theta(3);
x=V(1);
y=V(2);
z=V(3);
d1x=d1V(1);
d1y=d1V(2);
d1z=d1V(3);
d2x=d2V(1);
d2y=d2V(2);
d2z=d2V(3);

%Ai is the 3x3 part of the matrix A
Ai=[-2*(-x + La*sin(phi1)*(cos(theta1)*sin(beta) - cos(beta)*sin(alpha)*sin(theta1)) +...
      cos(phi1)*(R + La*cos(beta)*cos(theta1) + La*sin(alpha)*sin(beta)*sin(theta1))),...
      2*(y + La*cos(phi1)*(cos(theta1)*sin(beta) - cos(beta)*sin(alpha)*sin(theta1)) -...
      sin(phi1)*(R + La*cos(beta)*cos(theta1) + La*sin(alpha)*sin(beta)*sin(theta1))),...
      2*(z + La*cos(alpha)*sin(theta1));...
      -2*(-x + La*sin(phi2)*(cos(theta2)*sin(beta) - cos(beta)*sin(alpha)*sin(theta2)) +...
      cos(phi2)*(R + La*cos(beta)*cos(theta2) + La*sin(alpha)*sin(beta)*sin(theta2))),...
      2*(y + La*cos(phi2)*(cos(theta2)*sin(beta) - cos(beta)*sin(alpha)*sin(theta2)) -...
      sin(phi2)*(R + La*cos(beta)*cos(theta2) + La*sin(alpha)*sin(beta)*sin(theta2))),...
      2*(z + La*cos(alpha)*sin(theta2));...
      -2*(-x + La*sin(phi3)*(cos(theta3)*sin(beta) - cos(beta)*sin(alpha)*sin(theta3)) +...
      cos(phi3)*(R + La*cos(beta)*cos(theta3) + La*sin(alpha)*sin(beta)*sin(theta3))),...
      2*(y + La*cos(phi3)*(cos(theta3)*sin(beta) - cos(beta)*sin(alpha)*sin(theta3)) -...
      sin(phi3)*(R + La*cos(beta)*cos(theta3) + La*sin(alpha)*sin(beta)*sin(theta3))), ...
      2*(z + La*cos(alpha)*sin(theta3))];

% A is the transpose of matrix Ai:
A=Ai.';

%Mass matrix - M1 and M2 are the submatrices of the mass matrix
M1 =  [Mb + Mc, 0, 0, (La*Mb*(cos(phi1)*(cos(theta1)*sin(alpha)*sin(beta) - ...
      cos(beta)*sin(theta1)) - sin(phi1)*(cos(beta)*cos(theta1)*sin(alpha) + ...
      sin(beta)*sin(theta1))))/6, (La*Mb*(cos(phi2)*(cos(theta2)*sin(alpha)*sin(beta) -...
      cos(beta)*sin(theta2)) - sin(phi2)*(cos(beta)*cos(theta2)*sin(alpha) + ...
      sin(beta)*sin(theta2))))/6, (La*Mb*(cos(phi3)*(cos(theta3)*sin(alpha)*sin(beta) - ...
      cos(beta)*sin(theta3)) - sin(phi3)*(cos(beta)*cos(theta3)*sin(alpha) + ...
      sin(beta)*sin(theta3))))/6;...
      0, Mb + Mc, 0, (La*Mb*(sin(beta)*(cos(theta1)*sin(alpha)*sin(phi1) + ...
      cos(phi1)*sin(theta1)) + cos(beta)*(cos(phi1)*cos(theta1)*sin(alpha) - ...
      sin(phi1)*sin(theta1))))/6, (La*Mb*(sin(beta)*(cos(theta2)*sin(alpha)*sin(phi2) +...
      cos(phi2)*sin(theta2)) + cos(beta)*(cos(phi2)*cos(theta2)*sin(alpha) - ...
      sin(phi2)*sin(theta2))))/6, (La*Mb*(sin(beta)*(cos(theta3)*sin(alpha)*sin(phi3) +...
      cos(phi3)*sin(theta3)) + cos(beta)*(cos(phi3)*cos(theta3)*sin(alpha) - ...
      sin(phi3)*sin(theta3))))/6;...
      0, 0, Mb + Mc, -(La*Mb*cos(alpha)*cos(theta1))/6, -(La*Mb*cos(alpha)*cos(theta2))/6,...
      -(La*Mb*cos(alpha)*cos(theta3))/6];

M2 = [(La*Mb*(cos(phi1)*(cos(theta1)*sin(alpha)*sin(beta) - cos(beta)*sin(theta1)) - ...
      sin(phi1)*(cos(beta)*cos(theta1)*sin(alpha) + sin(beta)*sin(theta1))))/6, ...
      (La*Mb*(sin(beta)*(cos(theta1)*sin(alpha)*sin(phi1) + cos(phi1)*sin(theta1)) + ...
      cos(beta)*(cos(phi1)*cos(theta1)*sin(alpha) - sin(phi1)*sin(theta1))))/6, ...
      -(La*Mb*cos(alpha)*cos(theta1))/6, Ja + (La^2*(Mb + 3*Mj))/3, 0, 0;...
      (La*Mb*(cos(phi2)*(cos(theta2)*sin(alpha)*sin(beta) - cos(beta)*sin(theta2)) -...
      sin(phi2)*(cos(beta)*cos(theta2)*sin(alpha) + sin(beta)*sin(theta2))))/6, ...
      (La*Mb*(sin(beta)*(cos(theta2)*sin(alpha)*sin(phi2) + cos(phi2)*sin(theta2)) + ...
      cos(beta)*(cos(phi2)*cos(theta2)*sin(alpha) - sin(phi2)*sin(theta2))))/6, ...
      -(La*Mb*cos(alpha)*cos(theta2))/6, 0, Ja + (La^2*(Mb + 3*Mj))/3, 0;...
      (La*Mb*(cos(phi3)*(cos(theta3)*sin(alpha)*sin(beta) - cos(beta)*sin(theta3)) - ...
      sin(phi3)*(cos(beta)*cos(theta3)*sin(alpha) + sin(beta)*sin(theta3))))/6, ...
      (La*Mb*(sin(beta)*(cos(theta3)*sin(alpha)*sin(phi3) + cos(phi3)*sin(theta3)) + ...
      cos(beta)*(cos(phi3)*cos(theta3)*sin(alpha) - sin(phi3)*sin(theta3))))/6, ...
      -(La*Mb*cos(alpha)*cos(theta3))/6, 0, 0, Ja + (La^2*(Mb + 3*Mj))/3];

%dMdt1 and dMdt2 are the time derivatives of the matrices M1 and M2 respectively
dMdt1 =[0, 0, 0, -(d1theta1*La*Mb*(sin(beta)*(cos(theta1)*sin(phi1) + ...
      cos(phi1)*sin(alpha)*sin(theta1)) + cos(beta)*(cos(phi1)*cos(theta1) - ...
      sin(alpha)*sin(phi1)*sin(theta1))))/6, ...
      -(d1theta2*La*Mb*(sin(beta)*(cos(theta2)*sin(phi2) + ...
      cos(phi2)*sin(alpha)*sin(theta2)) + cos(beta)*(cos(phi2)*cos(theta2) - ...
      sin(alpha)*sin(phi2)*sin(theta2))))/6, ...
      -(d1theta3*La*Mb*(sin(beta)*(cos(theta3)*sin(phi3) + ...
      cos(phi3)*sin(alpha)*sin(theta3)) + cos(beta)*(cos(phi3)*cos(theta3) - ...
      sin(alpha)*sin(phi3)*sin(theta3))))/6;...
      0, 0, 0, (d1theta1*La*Mb*(cos(phi1)*(cos(theta1)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta1)) - sin(phi1)*(cos(beta)*cos(theta1) + ...
      sin(alpha)*sin(beta)*sin(theta1))))/6, ...
      (d1theta2*La*Mb*(cos(phi2)*(cos(theta2)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta2)) - sin(phi2)*(cos(beta)*cos(theta2) + ...
      sin(alpha)*sin(beta)*sin(theta2))))/6, ...
      (d1theta3*La*Mb*(cos(phi3)*(cos(theta3)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta3)) - sin(phi3)*(cos(beta)*cos(theta3) + ...
      sin(alpha)*sin(beta)*sin(theta3))))/6; ...
      0, 0, 0, (d1theta1*La*Mb*cos(alpha)*sin(theta1))/6, ...
      (d1theta2*La*Mb*cos(alpha)*sin(theta2))/6, ...
      (d1theta3*La*Mb*cos(alpha)*sin(theta3))/6];

dMdt2 = [-(d1theta1*La*Mb*(sin(beta)*(cos(theta1)*sin(phi1) + ...
      cos(phi1)*sin(alpha)*sin(theta1)) + cos(beta)*(cos(phi1)*cos(theta1) - ...
      sin(alpha)*sin(phi1)*sin(theta1))))/6, ...
      (d1theta1*La*Mb*(cos(phi1)*(cos(theta1)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta1)) - sin(phi1)*(cos(beta)*cos(theta1) + ...
      sin(alpha)*sin(beta)*sin(theta1))))/6, (d1theta1*La*Mb*cos(alpha)*sin(theta1))/6,...
      0, 0, 0;...
      -(d1theta2*La*Mb*(sin(beta)*(cos(theta2)*sin(phi2) + ...
      cos(phi2)*sin(alpha)*sin(theta2)) + cos(beta)*(cos(phi2)*cos(theta2) - ...
      sin(alpha)*sin(phi2)*sin(theta2))))/6, ...
      (d1theta2*La*Mb*(cos(phi2)*(cos(theta2)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta2)) - sin(phi2)*(cos(beta)*cos(theta2) + ...
      sin(alpha)*sin(beta)*sin(theta2))))/6, (d1theta2*La*Mb*cos(alpha)*sin(theta2))/6,...
      0, 0, 0;...
      -(d1theta3*La*Mb*(sin(beta)*(cos(theta3)*sin(phi3) + ...
      cos(phi3)*sin(alpha)*sin(theta3)) + cos(beta)*(cos(phi3)*cos(theta3) - ...
      sin(alpha)*sin(phi3)*sin(theta3))))/6, ...
      (d1theta3*La*Mb*(cos(phi3)*(cos(theta3)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(theta3)) - sin(phi3)*(cos(beta)*cos(theta3) + ...
      sin(alpha)*sin(beta)*sin(theta3))))/6, (d1theta3*La*Mb*cos(alpha)*sin(theta3))/6,...
      0, 0, 0];

%Lq1 and Lq2 are the 3x1 sub-vectors of vector Lq.
%Lq is the vector of partial derivatives of the Lagrangian function
%with respect to the dependent coordinates.
Lq1 = [0; 0; -(g*(3*Mb + 2*Mc))/2];

Lq2 = [(La*(4*cos(alpha)*(6*g*H*Ma*cos(theta1) + 3*g*Mb*cos(theta1) +...
         6*g*Mj*cos(theta1) + d1theta1*d1z*Mb*sin(theta1)) + ...
         d1theta1*d1y*Mb*(-cos(alpha + beta - phi1 - theta1) - ...
         cos(alpha - beta + phi1 - theta1) + cos(alpha + beta - phi1 + theta1) + ...
         cos(alpha - beta + phi1 + theta1) + 2*sin(beta - phi1 - theta1) + ...
         2*sin(beta - phi1 + theta1)) - d1theta1*d1x*Mb*(2*cos(beta - phi1 - theta1) +...
         2*cos(beta - phi1 + theta1) + sin(alpha + beta - phi1 - theta1) - ...
         sin(alpha - beta + phi1 - theta1) - sin(alpha + beta - phi1 + theta1) + ...
         sin(alpha - beta + phi1 + theta1))))/24;...
         (La*(4*cos(alpha)*(6*g*H*Ma*cos(theta2) + 3*g*Mb*cos(theta2) + ...
         6*g*Mj*cos(theta2) + d1theta2*d1z*Mb*sin(theta2)) + ...
         d1theta2*d1y*Mb*(-cos(alpha + beta - phi2 - theta2) - ...
         cos(alpha - beta + phi2 - theta2) + cos(alpha + beta - phi2 + theta2) + ...
         cos(alpha - beta + phi2 + theta2) + 2*sin(beta - phi2 - theta2) + ...
         2*sin(beta - phi2 + theta2)) - d1theta2*d1x*Mb*(2*cos(beta - phi2 - theta2) + ...
         2*cos(beta - phi2 + theta2) + sin(alpha + beta - phi2 - theta2) - ...
         sin(alpha - beta + phi2 - theta2) - sin(alpha + beta - phi2 + theta2) + ...
         sin(alpha - beta + phi2 + theta2))))/24;...
         (La*(4*cos(alpha)*(6*g*H*Ma*cos(theta3) + 3*g*Mb*cos(theta3) + ...
         6*g*Mj*cos(theta3) + d1theta3*d1z*Mb*sin(theta3)) + ...
         d1theta3*d1y*Mb*(-cos(alpha + beta - phi3 - theta3) - ...
         cos(alpha - beta + phi3 - theta3) + cos(alpha + beta - phi3 + theta3) + ...
         cos(alpha - beta + phi3 + theta3) + 2*sin(beta - phi3 - theta3) + ...
         2*sin(beta - phi3 + theta3)) - d1theta3*d1x*Mb*(2*cos(beta - phi3 - theta3) + ...
         2*cos(beta - phi3 + theta3) + sin(alpha + beta - phi3 - theta3) - ...
         sin(alpha - beta + phi3 - theta3) - sin(alpha + beta - phi3 + theta3) + ...
         sin(alpha - beta + phi3 + theta3))))/24];
   
%Partial derivatives of the constraint functions:
A14 =   2*La*(z*cos(alpha)*cos(theta1) + R*cos(theta1)*sin(alpha)*sin(beta) - ...
      R*cos(beta)*sin(theta1) - y*(cos(beta)*cos(phi1)*cos(theta1)*sin(alpha) + ...
      cos(theta1)*sin(alpha)*sin(beta)*sin(phi1) + cos(phi1)*sin(beta)*sin(theta1) - ...
      cos(beta)*sin(phi1)*sin(theta1)) + x*(cos(phi1)*(-(cos(theta1)*sin(alpha)*sin(beta)) +...
      cos(beta)*sin(theta1)) + sin(phi1)*(cos(beta)*cos(theta1)*sin(alpha) + sin(beta)*sin(theta1))));
        
A25 =  2*La*(z*cos(alpha)*cos(theta2) + R*cos(theta2)*sin(alpha)*sin(beta) - ...
      R*cos(beta)*sin(theta2) - y*(cos(beta)*cos(phi2)*cos(theta2)*sin(alpha) + ...
      cos(theta2)*sin(alpha)*sin(beta)*sin(phi2) + cos(phi2)*sin(beta)*sin(theta2) - ...
      cos(beta)*sin(phi2)*sin(theta2)) + x*(cos(phi2)*(-(cos(theta2)*sin(alpha)*sin(beta)) +...
      cos(beta)*sin(theta2)) + sin(phi2)*(cos(beta)*cos(theta2)*sin(alpha) + sin(beta)*sin(theta2))));
        
A36= 2*La*(z*cos(alpha)*cos(theta3) + R*cos(theta3)*sin(alpha)*sin(beta) - ...
      R*cos(beta)*sin(theta3) - y*(cos(beta)*cos(phi3)*cos(theta3)*sin(alpha) + ...
      cos(theta3)*sin(alpha)*sin(beta)*sin(phi3) + cos(phi3)*sin(beta)*sin(theta3) - ...
      cos(beta)*sin(phi3)*sin(theta3)) + x*(cos(phi3)*(-(cos(theta3)*sin(alpha)*sin(beta)) + ...
      cos(beta)*sin(theta3)) + sin(phi3)*(cos(beta)*cos(theta3)*sin(alpha) + sin(beta)*sin(theta3))));
   
% d1q is the vector of coordinate velocities:
d1q = [d1x;d1y;d1z;d1theta1;d1theta2;d1theta3];

% d2q is the vector of coordinate accelerations:
d2q = [d2x;d2y;d2z;d2theta1;d2theta2;d2theta3];

% B is the left hand side of the first three Lagrange equations
B=M1*d2q+dMdt1*d1q-Lq1;
   
%Calculate Lagrange Multipliers
lambda = A\B;
   
% D is the left hand side of the last three Lagrange equations
D = M2*d2q+dMdt2*d1q-Lq2;
   
E = [A14,0,0;0,A25,0;0,0,A36];

%Calculate Torques
Q = D - E*lambda;


