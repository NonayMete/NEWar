% FD is the vector of ODE functions used by the 'FDTraj' function
% to solve the Forward Dynamics problem.
%
% The input vector y is the vector of dependent coordinates and dependent
% coordinate velocities.
%
% FD returns a vector of dependent coordinate velocities and dependent 
% coordinate accelerations.
%
% FD incorporates the Baumgarte method of constraint stabilisation.
%
% Author: Nadine Frame 1999

function F = FD(t,y)

global alpha beta phi a b timeQ
% The global variables are specified in the 'FDTraj' function.

%Initialise parameters:
InitArms;
InitDynamics;
R=Ra-Rb;

%Note: all angles are already in radians.

%Assign vector components:
phi1=phi(1);
phi2=phi(2);
phi3=phi(3);

y1=y(1);
y2=y(2);
y3=y(3);
y4=y(4);
y5=y(5);
y6=y(6);
y7=y(7);
y8=y(8);
y9=y(9);
y10=y(10);
y11=y(11);
y12=y(12);

%interpolate for torque values
Q4=interp1(timeQ(:,1),timeQ(:,2),t);
Q5=interp1(timeQ(:,1),timeQ(:,3),t);
Q6=interp1(timeQ(:,1),timeQ(:,4),t);

%A is the Jacobian matrix of the constraint functions.   
A =[-2*(-y1 + La*sin(phi1)*(cos(y4)*sin(beta) - cos(beta)*sin(alpha)*sin(y4)) + ...
            cos(phi1)*(R + La*cos(beta)*cos(y4) + La*sin(alpha)*sin(beta)*sin(y4))), ...
            2*(y2 + La*cos(phi1)*(cos(y4)*sin(beta) - cos(beta)*sin(alpha)*sin(y4)) - ...
            sin(phi1)*(R + La*cos(beta)*cos(y4) + La*sin(alpha)*sin(beta)*sin(y4))), ...
            2*(y3 + La*cos(alpha)*sin(y4)), 2*La*(y3*cos(alpha)*cos(y4) + ...
            R*cos(y4)*sin(alpha)*sin(beta) - R*cos(beta)*sin(y4) - ...
            y2*(cos(beta)*cos(phi1)*cos(y4)*sin(alpha) + ...
            cos(y4)*sin(alpha)*sin(beta)*sin(phi1) + cos(phi1)*sin(beta)*sin(y4) - ...
            cos(beta)*sin(phi1)*sin(y4)) + y1*(cos(phi1)*(-(cos(y4)*sin(alpha)*sin(beta)) +...
            cos(beta)*sin(y4)) + sin(phi1)*(cos(beta)*cos(y4)*sin(alpha) + ...
            sin(beta)*sin(y4)))), 0, 0;...
            -2*(-y1 + La*sin(phi2)*(cos(y5)*sin(beta) - cos(beta)*sin(alpha)*sin(y5)) + ...
            cos(phi2)*(R + La*cos(beta)*cos(y5) + La*sin(alpha)*sin(beta)*sin(y5))), ...
            2*(y2 + La*cos(phi2)*(cos(y5)*sin(beta) - cos(beta)*sin(alpha)*sin(y5)) - ...
            sin(phi2)*(R + La*cos(beta)*cos(y5) + La*sin(alpha)*sin(beta)*sin(y5))), ...
            2*(y3 + La*cos(alpha)*sin(y5)), 0, 2*La*(y3*cos(alpha)*cos(y5) + ...
            R*cos(y5)*sin(alpha)*sin(beta) - R*cos(beta)*sin(y5) - ...
            y2*(cos(beta)*cos(phi2)*cos(y5)*sin(alpha) + ...
            cos(y5)*sin(alpha)*sin(beta)*sin(phi2) + cos(phi2)*sin(beta)*sin(y5) - ...
            cos(beta)*sin(phi2)*sin(y5)) + y1*(cos(phi2)*(-(cos(y5)*sin(alpha)*sin(beta)) +...
            cos(beta)*sin(y5)) + sin(phi2)*(cos(beta)*cos(y5)*sin(alpha) + sin(beta)*sin(y5)))), 0;...
            -2*(-y1 + La*sin(phi3)*(cos(y6)*sin(beta) - cos(beta)*sin(alpha)*sin(y6)) +...
            cos(phi3)*(R + La*cos(beta)*cos(y6) + La*sin(alpha)*sin(beta)*sin(y6))), ...
            2*(y2 + La*cos(phi3)*(cos(y6)*sin(beta) - cos(beta)*sin(alpha)*sin(y6)) - ...
            sin(phi3)*(R + La*cos(beta)*cos(y6) + La*sin(alpha)*sin(beta)*sin(y6))), ...
            2*(y3 + La*cos(alpha)*sin(y6)), 0, 0, 2*La*(y3*cos(alpha)*cos(y6) + ...
            R*cos(y6)*sin(alpha)*sin(beta) - R*cos(beta)*sin(y6) - ...
            y2*(cos(beta)*cos(phi3)*cos(y6)*sin(alpha) + ...
            cos(y6)*sin(alpha)*sin(beta)*sin(phi3) + cos(phi3)*sin(beta)*sin(y6) - ...
            cos(beta)*sin(phi3)*sin(y6)) + y1*(cos(phi3)*(-(cos(y6)*sin(alpha)*sin(beta)) +...
            cos(beta)*sin(y6)) + sin(phi3)*(cos(beta)*cos(y6)*sin(alpha) + sin(beta)*sin(y6))))];

%dAdt is the time derivative of the matrix A.
dAdt = [2*(y7 + La*y10*(cos(phi1)*(-(cos(y4)*sin(alpha)*sin(beta)) + cos(beta)*sin(y4)) +...
      sin(phi1)*(cos(beta)*cos(y4)*sin(alpha) + sin(beta)*sin(y4)))), ...
      2*(y8 - La*y10*(sin(beta)*(cos(y4)*sin(alpha)*sin(phi1) + cos(phi1)*sin(y4)) + ...
      cos(beta)*(cos(phi1)*cos(y4)*sin(alpha) - sin(phi1)*sin(y4)))), ...
      2*(y9 + La*y10*cos(alpha)*cos(y4)), -2*La*(-(y9*cos(alpha)*cos(y4)) + ...
      R*y10*cos(beta)*cos(y4) - y1*y10*cos(beta)*cos(phi1)*cos(y4) + ...
      y10*y2*cos(phi1)*cos(y4)*sin(beta) - y10*y2*cos(beta)*cos(y4)*sin(phi1) - ...
      y1*y10*cos(y4)*sin(beta)*sin(phi1) + y10*y3*cos(alpha)*sin(y4) - ...
      y10*y2*cos(beta)*cos(phi1)*sin(alpha)*sin(y4) + R*y10*sin(alpha)*sin(beta)*sin(y4) -...
      y1*y10*cos(phi1)*sin(alpha)*sin(beta)*sin(y4) + ...
      y1*y10*cos(beta)*sin(alpha)*sin(phi1)*sin(y4) - ...
      y10*y2*sin(alpha)*sin(beta)*sin(phi1)*sin(y4) + ...
      y8*(cos(beta)*cos(phi1)*cos(y4)*sin(alpha) + cos(y4)*sin(alpha)*sin(beta)*sin(phi1) +...
      cos(phi1)*sin(beta)*sin(y4) - cos(beta)*sin(phi1)*sin(y4)) + ...
      y7*(cos(phi1)*(cos(y4)*sin(alpha)*sin(beta) - cos(beta)*sin(y4)) - ...
      sin(phi1)*(cos(beta)*cos(y4)*sin(alpha) + sin(beta)*sin(y4)))), 0, 0;...
      2*(y7 + La*y11*(cos(phi2)*(-(cos(y5)*sin(alpha)*sin(beta)) + cos(beta)*sin(y5)) + ...
      sin(phi2)*(cos(beta)*cos(y5)*sin(alpha) + sin(beta)*sin(y5)))), ...
      2*(y8 - La*y11*(sin(beta)*(cos(y5)*sin(alpha)*sin(phi2) + cos(phi2)*sin(y5)) +...
      cos(beta)*(cos(phi2)*cos(y5)*sin(alpha) - sin(phi2)*sin(y5)))), ...
      2*(y9 + La*y11*cos(alpha)*cos(y5)), 0, -2*La*(-(y9*cos(alpha)*cos(y5)) + ...
      R*y11*cos(beta)*cos(y5) - y1*y11*cos(beta)*cos(phi2)*cos(y5) + ...
      y11*y2*cos(phi2)*cos(y5)*sin(beta) - y11*y2*cos(beta)*cos(y5)*sin(phi2) - ...
      y1*y11*cos(y5)*sin(beta)*sin(phi2) + y11*y3*cos(alpha)*sin(y5) - ...
      y11*y2*cos(beta)*cos(phi2)*sin(alpha)*sin(y5) + R*y11*sin(alpha)*sin(beta)*sin(y5) -...
      y1*y11*cos(phi2)*sin(alpha)*sin(beta)*sin(y5) + ...
      y1*y11*cos(beta)*sin(alpha)*sin(phi2)*sin(y5) - ...
      y11*y2*sin(alpha)*sin(beta)*sin(phi2)*sin(y5) + ...
      y8*(cos(beta)*cos(phi2)*cos(y5)*sin(alpha) + ...
      cos(y5)*sin(alpha)*sin(beta)*sin(phi2) + cos(phi2)*sin(beta)*sin(y5) - ...
      cos(beta)*sin(phi2)*sin(y5)) + y7*(cos(phi2)*(cos(y5)*sin(alpha)*sin(beta) - ...
      cos(beta)*sin(y5)) - sin(phi2)*(cos(beta)*cos(y5)*sin(alpha) + sin(beta)*sin(y5)))), 0;...
      2*(y7 + La*y12*(cos(phi3)*(-(cos(y6)*sin(alpha)*sin(beta)) + cos(beta)*sin(y6)) + ...
      sin(phi3)*(cos(beta)*cos(y6)*sin(alpha) + sin(beta)*sin(y6)))), ...
      2*(y8 - La*y12*(sin(beta)*(cos(y6)*sin(alpha)*sin(phi3) + cos(phi3)*sin(y6)) + ...
      cos(beta)*(cos(phi3)*cos(y6)*sin(alpha) - sin(phi3)*sin(y6)))), ...
      2*(y9 + La*y12*cos(alpha)*cos(y6)), 0, 0, -2*La*(-(y9*cos(alpha)*cos(y6)) + ...
      R*y12*cos(beta)*cos(y6) - y1*y12*cos(beta)*cos(phi3)*cos(y6) + ...
      y12*y2*cos(phi3)*cos(y6)*sin(beta) - y12*y2*cos(beta)*cos(y6)*sin(phi3) - ...
      y1*y12*cos(y6)*sin(beta)*sin(phi3) + y12*y3*cos(alpha)*sin(y6) - ...
      y12*y2*cos(beta)*cos(phi3)*sin(alpha)*sin(y6) + ...
      R*y12*sin(alpha)*sin(beta)*sin(y6) - y1*y12*cos(phi3)*sin(alpha)*sin(beta)*sin(y6) +...
      y1*y12*cos(beta)*sin(alpha)*sin(phi3)*sin(y6) - ...
      y12*y2*sin(alpha)*sin(beta)*sin(phi3)*sin(y6) + ...
      y8*(cos(beta)*cos(phi3)*cos(y6)*sin(alpha) + cos(y6)*sin(alpha)*sin(beta)*sin(phi3) +...
      cos(phi3)*sin(beta)*sin(y6) - cos(beta)*sin(phi3)*sin(y6)) + ...
      y7*(cos(phi3)*(cos(y6)*sin(alpha)*sin(beta) - ...
      cos(beta)*sin(y6)) - sin(phi3)*(cos(beta)*cos(y6)*sin(alpha) + sin(beta)*sin(y6))))];

%F is the vector of constraint functions
F = [La^2 - Lb^2 + R^2 + y1^2 + y2^2 + y3^2 + 2*La*R*cos(beta)*cos(y4) + ...
      2*La*y3*cos(alpha)*sin(y4) + 2*La*R*sin(alpha)*sin(beta)*sin(y4) - ...
      2*y1*(La*sin(phi1)*(cos(y4)*sin(beta) - cos(beta)*sin(alpha)*sin(y4)) + ...
      cos(phi1)*(R + La*cos(beta)*cos(y4) + La*sin(alpha)*sin(beta)*sin(y4))) + ...
      2*y2*(La*cos(phi1)*(cos(y4)*sin(beta) - cos(beta)*sin(alpha)*sin(y4)) - ...
      sin(phi1)*(R + La*cos(beta)*cos(y4) + La*sin(alpha)*sin(beta)*sin(y4)));...
      La^2 - Lb^2 + R^2 + y1^2 + y2^2 + y3^2 + 2*La*R*cos(beta)*cos(y5) + ...
      2*La*y3*cos(alpha)*sin(y5) + 2*La*R*sin(alpha)*sin(beta)*sin(y5) - ...
      2*y1*(La*sin(phi2)*(cos(y5)*sin(beta) - cos(beta)*sin(alpha)*sin(y5)) +...
      cos(phi2)*(R + La*cos(beta)*cos(y5) + La*sin(alpha)*sin(beta)*sin(y5))) + ...
      2*y2*(La*cos(phi2)*(cos(y5)*sin(beta) - cos(beta)*sin(alpha)*sin(y5)) - ...
      sin(phi2)*(R + La*cos(beta)*cos(y5) + La*sin(alpha)*sin(beta)*sin(y5)));...
      La^2 - Lb^2 + R^2 + y1^2 + y2^2 + y3^2 + 2*La*R*cos(beta)*cos(y6) + ...
      2*La*y3*cos(alpha)*sin(y6) + 2*La*R*sin(alpha)*sin(beta)*sin(y6) - ...
      2*y1*(La*sin(phi3)*(cos(y6)*sin(beta) - cos(beta)*sin(alpha)*sin(y6)) +...
      cos(phi3)*(R + La*cos(beta)*cos(y6) + La*sin(alpha)*sin(beta)*sin(y6))) + ...
      2*y2*(La*cos(phi3)*(cos(y6)*sin(beta) - cos(beta)*sin(alpha)*sin(y6)) -...
      sin(phi3)*(R + La*cos(beta)*cos(y6) + La*sin(alpha)*sin(beta)*sin(y6)))];

%M is the mass matrix.
M = [Mb + Mc, 0, 0,(La*Mb*(cos(phi1)*(cos(y4)*sin(alpha)*sin(beta) - ...
         cos(beta)*sin(y4)) - sin(phi1)*(cos(beta)*cos(y4)*sin(alpha) + ...
         sin(beta)*sin(y4))))/6, (La*Mb*(cos(phi2)*(cos(y5)*sin(alpha)*sin(beta) - ...
         cos(beta)*sin(y5)) - sin(phi2)*(cos(beta)*cos(y5)*sin(alpha) + sin(beta)*sin(y5))))/6,...
         (La*Mb*(cos(phi3)*(cos(y6)*sin(alpha)*sin(beta) - cos(beta)*sin(y6)) - ...
         sin(phi3)*(cos(beta)*cos(y6)*sin(alpha) + sin(beta)*sin(y6))))/6;...
         0, Mb + Mc, 0,(La*Mb*(sin(beta)*(cos(y4)*sin(alpha)*sin(phi1) + ...
         cos(phi1)*sin(y4)) + cos(beta)*(cos(phi1)*cos(y4)*sin(alpha) - ...
         sin(phi1)*sin(y4))))/6, (La*Mb*(sin(beta)*(cos(y5)*sin(alpha)*sin(phi2) + ...
         cos(phi2)*sin(y5)) + cos(beta)*(cos(phi2)*cos(y5)*sin(alpha) - sin(phi2)*sin(y5))))/6,...
         (La*Mb*(sin(beta)*(cos(y6)*sin(alpha)*sin(phi3) + cos(phi3)*sin(y6)) + ...
         cos(beta)*(cos(phi3)*cos(y6)*sin(alpha) - sin(phi3)*sin(y6))))/6;...
         0, 0, Mb + Mc, -(La*Mb*cos(alpha)*cos(y4))/6, -(La*Mb*cos(alpha)*cos(y5))/6, ...
         -(La*Mb*cos(alpha)*cos(y6))/6;(La*Mb*(cos(phi1)*(cos(y4)*sin(alpha)*sin(beta) - ...
         cos(beta)*sin(y4)) - sin(phi1)*(cos(beta)*cos(y4)*sin(alpha) + sin(beta)*sin(y4))))/6,...
         (La*Mb*(sin(beta)*(cos(y4)*sin(alpha)*sin(phi1) + cos(phi1)*sin(y4)) + ...
         cos(beta)*(cos(phi1)*cos(y4)*sin(alpha) - sin(phi1)*sin(y4))))/6,...
         -(La*Mb*cos(alpha)*cos(y4))/6, Ja + (La^2*(Mb + 3*Mj))/3, 0, 0;...
         (La*Mb*(cos(phi2)*(cos(y5)*sin(alpha)*sin(beta) - cos(beta)*sin(y5)) -...
         sin(phi2)*(cos(beta)*cos(y5)*sin(alpha) + sin(beta)*sin(y5))))/6,...
         (La*Mb*(sin(beta)*(cos(y5)*sin(alpha)*sin(phi2) + cos(phi2)*sin(y5)) + ...
         cos(beta)*(cos(phi2)*cos(y5)*sin(alpha) - sin(phi2)*sin(y5))))/6, ...
         -(La*Mb*cos(alpha)*cos(y5))/6, 0, Ja + (La^2*(Mb + 3*Mj))/3, 0;...
         (La*Mb*(cos(phi3)*(cos(y6)*sin(alpha)*sin(beta) - cos(beta)*sin(y6)) - ...
         sin(phi3)*(cos(beta)*cos(y6)*sin(alpha) + sin(beta)*sin(y6))))/6, ...
         (La*Mb*(sin(beta)*(cos(y6)*sin(alpha)*sin(phi3) + cos(phi3)*sin(y6)) + ...
         cos(beta)*(cos(phi3)*cos(y6)*sin(alpha) - sin(phi3)*sin(y6))))/6, ...
         -(La*Mb*cos(alpha)*cos(y6))/6, 0, 0, Ja + (La^2*(Mb + 3*Mj))/3];


%dMdt is the time derivative of the mass matrix M.
dMdt = [0, 0, 0, -(y10*La*Mb*(sin(beta)*(cos(y4)*sin(phi1) + ...
      cos(phi1)*sin(alpha)*sin(y4)) + cos(beta)*(cos(phi1)*cos(y4) - ...
      sin(alpha)*sin(phi1)*sin(y4))))/6, ...
      -(y11*La*Mb*(sin(beta)*(cos(y5)*sin(phi2) + ...
      cos(phi2)*sin(alpha)*sin(y5)) + cos(beta)*(cos(phi2)*cos(y5) - ...
      sin(alpha)*sin(phi2)*sin(y5))))/6, ...
      -(y12*La*Mb*(sin(beta)*(cos(y6)*sin(phi3) + ...
      cos(phi3)*sin(alpha)*sin(y6)) + cos(beta)*(cos(phi3)*cos(y6) - ...
      sin(alpha)*sin(phi3)*sin(y6))))/6;...
      0, 0, 0, (y10*La*Mb*(cos(phi1)*(cos(y4)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y4)) - sin(phi1)*(cos(beta)*cos(y4) + ...
      sin(alpha)*sin(beta)*sin(y4))))/6, ...
      (y11*La*Mb*(cos(phi2)*(cos(y5)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y5)) - sin(phi2)*(cos(beta)*cos(y5) + ...
      sin(alpha)*sin(beta)*sin(y5))))/6, ...
      (y12*La*Mb*(cos(phi3)*(cos(y6)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y6)) - sin(phi3)*(cos(beta)*cos(y6) + ...
      sin(alpha)*sin(beta)*sin(y6))))/6; ...
      0, 0, 0, (y10*La*Mb*cos(alpha)*sin(y4))/6, ...
      (y11*La*Mb*cos(alpha)*sin(y5))/6, ...
      (y12*La*Mb*cos(alpha)*sin(y6))/6; ...
      -(y10*La*Mb*(sin(beta)*(cos(y4)*sin(phi1) + ...
      cos(phi1)*sin(alpha)*sin(y4)) + cos(beta)*(cos(phi1)*cos(y4) - ...
      sin(alpha)*sin(phi1)*sin(y4))))/6, ...
      (y10*La*Mb*(cos(phi1)*(cos(y4)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y4)) - sin(phi1)*(cos(beta)*cos(y4) + ...
      sin(alpha)*sin(beta)*sin(y4))))/6, (y10*La*Mb*cos(alpha)*sin(y4))/6,...
      0, 0, 0;...
      -(y11*La*Mb*(sin(beta)*(cos(y5)*sin(phi2) + ...
      cos(phi2)*sin(alpha)*sin(y5)) + cos(beta)*(cos(phi2)*cos(y5) - ...
      sin(alpha)*sin(phi2)*sin(y5))))/6, ...
      (y11*La*Mb*(cos(phi2)*(cos(y5)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y5)) - sin(phi2)*(cos(beta)*cos(y5) + ...
      sin(alpha)*sin(beta)*sin(y5))))/6, (y11*La*Mb*cos(alpha)*sin(y5))/6,...
      0, 0, 0;...
      -(y12*La*Mb*(sin(beta)*(cos(y6)*sin(phi3) + ...
      cos(phi3)*sin(alpha)*sin(y6)) + cos(beta)*(cos(phi3)*cos(y6) - ...
      sin(alpha)*sin(phi3)*sin(y6))))/6, ...
      (y12*La*Mb*(cos(phi3)*(cos(y6)*sin(beta) - ...
      cos(beta)*sin(alpha)*sin(y6)) - sin(phi3)*(cos(beta)*cos(y6) + ...
      sin(alpha)*sin(beta)*sin(y6))))/6, (y12*La*Mb*cos(alpha)*sin(y6))/6,...
      0, 0, 0];

%Lq is the vector of partial derivatives of the Lagrangian function with
%respect to the dependent coordinates.
Lq = [0; 0; -(g*(3*Mb + 2*Mc))/2;...
         (La*(4*cos(alpha)*(6*g*H*Ma*cos(y4) + 3*g*Mb*cos(y4) +...
         6*g*Mj*cos(y4) + y10*y9*Mb*sin(y4)) + ...
         y10*y8*Mb*(-cos(alpha + beta - phi1 - y4) - ...
         cos(alpha - beta + phi1 - y4) + cos(alpha + beta - phi1 + y4) + ...
         cos(alpha - beta + phi1 + y4) + 2*sin(beta - phi1 - y4) + ...
         2*sin(beta - phi1 + y4)) - y10*y7*Mb*(2*cos(beta - phi1 - y4) +...
         2*cos(beta - phi1 + y4) + sin(alpha + beta - phi1 - y4) - ...
         sin(alpha - beta + phi1 - y4) - sin(alpha + beta - phi1 + y4) + ...
         sin(alpha - beta + phi1 + y4))))/24;...
         (La*(4*cos(alpha)*(6*g*H*Ma*cos(y5) + 3*g*Mb*cos(y5) + ...
         6*g*Mj*cos(y5) + y11*y9*Mb*sin(y5)) + ...
         y11*y8*Mb*(-cos(alpha + beta - phi2 - y5) - ...
         cos(alpha - beta + phi2 - y5) + cos(alpha + beta - phi2 + y5) + ...
         cos(alpha - beta + phi2 + y5) + 2*sin(beta - phi2 - y5) + ...
         2*sin(beta - phi2 + y5)) - y11*y7*Mb*(2*cos(beta - phi2 - y5) + ...
         2*cos(beta - phi2 + y5) + sin(alpha + beta - phi2 - y5) - ...
         sin(alpha - beta + phi2 - y5) - sin(alpha + beta - phi2 + y5) + ...
         sin(alpha - beta + phi2 + y5))))/24;...
         (La*(4*cos(alpha)*(6*g*H*Ma*cos(y6) + 3*g*Mb*cos(y6) + ...
         6*g*Mj*cos(y6) + y12*y9*Mb*sin(y6)) + ...
         y12*y8*Mb*(-cos(alpha + beta - phi3 - y6) - ...
         cos(alpha - beta + phi3 - y6) + cos(alpha + beta - phi3 + y6) + ...
         cos(alpha - beta + phi3 + y6) + 2*sin(beta - phi3 - y6) + ...
         2*sin(beta - phi3 + y6)) - y12*y7*Mb*(2*cos(beta - phi3 - y6) + ...
         2*cos(beta - phi3 + y6) + sin(alpha + beta - phi3 - y6) - ...
         sin(alpha - beta + phi3 - y6) - sin(alpha + beta - phi3 + y6) + ...
         sin(alpha - beta + phi3 + y6))))/24];
   
      
%dq is the vector of coordinate velocities:
dq = [y7;y8;y9;y10;y11;y12];

%d is the 'right hand side' of the acceleration kinematic equations:
d = -dAdt*dq-2*a*A*dq-b^2*F;

%Qex is the vector of motor torques:
Qex = [0;0;0;Q4;Q5;Q6];

%Q is the vector of external forces and velocity-dependent inertia forces:
Q = Qex-dMdt*dq+Lq;

%Calculate the inverse of the mass matrix:
inverseM=inv(M);

%U and V are composite matrices used to calculate the Lagrange multipliers:
U = A*inverseM*A.';
V = d-A*inverseM*Q;

%Calculate values for the Lagrange multipliers (lambda) by Gaussian elimination:
lambda=U\V;

%ODE eqns for vector q
F1=dq;

%ODE eqns for vector dq: F2 calculates the dependent coordinate accelerations
F2=inverseM*Q+inverseM*A.'*lambda;

%ODE eqns for vector y
F=[F1;F2];

